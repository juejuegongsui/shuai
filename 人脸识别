//人脸对比

import face_recognition
known_image = face_recognition.load_image_file('C:/Users/Administrator/Desktop/chuanpu.jpg')
unknown_image = face_recognition.load_image_file("C:/Users/Administrator/Desktop/unknown1.jpg")
chuanpu_encoding = face_recognition.face_encodings(known_image)[0]
unknown_encoding = face_recognition.face_encodings(unknown_image)[0]
results = face_recognition.compare_faces([chuanpu_encoding], unknown_encoding)
if results[0] == True:
    print ("It's a picture of chuanpu!")
else:
    print ("It's not a picture of chuanpu!")
    
    
//人脸截取
from PIL import Image
import face_recognition

# Load the jpg file into a numpy array
image = face_recognition.load_image_file("C:/Users/Administrator/Desktop/chuanpu.jpg")

# Find all the faces in the image using the default HOG-based model.
# This method is fairly accurate, but not as accurate as the CNN model and not GPU accelerated.
# See also: find_faces_in_picture_cnn.py

face_locations = face_recognition.face_locations(image)
print("I found {} face(s) in this photograph.".format(len(face_locations)))

for face_location in face_locations:
    # 打印出每张人脸对应四条边在图片中的位置(top、right、bottom、left)
    top, right, bottom, left = face_location
    print("A face is located at pixel location Top: {}, Left: {}, Bottom: {}, Right: {}")


    # You can access the actual face itself like this:
    face_image = image[top:bottom, left:right]
    pil_image = Image.fromarray(face_image)
    pil_image.show()

//识别面部特征

import face_recognition
 
# Load the jpg file into a numpy array
from PIL import Image, ImageDraw
 
image = face_recognition.load_image_file("C:/Users/Administrator/Desktop/chuanpu.jpg")
 
# 找出图片中所有人脸的面部特征
face_landmarks_list = face_recognition.face_landmarks(image)
 
print ("I found {} face(s) in this photograph.".format(len(face_landmarks_list)))
 
# 创建一个PIL ImageDraw对象，后面用于图像绘制
pil_image = Image.fromarray(image)
d = ImageDraw.Draw(pil_image)
 
for face_landmarks in face_landmarks_list:
    # 打印出图片中每个脸部特征的位置
    for facial_feature in face_landmarks.keys():
        print ("The {} in this face has the following points: {}"
               .format(facial_feature, face_landmarks[facial_feature]))
 
    # 用线段描出图像中的每个脸部特征
    for facial_feature in face_landmarks.keys():
        d.line(face_landmarks[facial_feature], width=5)
 
# Show the picture
pil_image.show()

//人脸化妆
import face_recognition
from PIL import Image, ImageDraw
 
# Load the jpg file into a numpy array
image = face_recognition.load_image_file("C:/Users/Administrator/Desktop/chuanpu.jpg")
 
# Find all facial features in all the faces in the image
face_landmarks_list = face_recognition.face_landmarks(image)
 
for face_landmarks in face_landmarks_list:
    # Create a PIL imageDraw object so we can draw on the picture
    pil_image = Image.fromarray(image)
    d = ImageDraw.Draw(pil_image,'RGBA')
 
    # 画个浓眉
    d.polygon(face_landmarks['left_eyebrow'], fill=(68, 54, 39, 128))
    d.polygon(face_landmarks['right_eyebrow'], fill=(68, 54, 39, 128))
    d.line(face_landmarks['left_eyebrow'], fill=(68, 54, 39, 150), width=5)
    d.line(face_landmarks['right_eyebrow'], fill=(68, 54, 39, 150), width=5)
 
    # 涂个性感的嘴唇
    d.polygon(face_landmarks['top_lip'], fill=(150, 0, 0, 128))
    d.polygon(face_landmarks['bottom_lip'], fill=(150, 0, 0, 128))
    d.line(face_landmarks['top_lip'], fill=(150, 0, 0, 64), width=8)
    d.line(face_landmarks['bottom_lip'], fill=(150, 0, 0, 64), width=8)
 
    # 闪亮的大眼睛
    d.polygon(face_landmarks['left_eye'], fill=(255, 255, 255, 30))
    d.polygon(face_landmarks['right_eye'], fill=(255, 255, 255, 30))
 
    # 画眼线
    d.line(face_landmarks['left_eye'] + [face_landmarks['left_eye'][0]], fill=(0, 0, 0, 110), width=6)
    d.line(face_landmarks['right_eye'] + [face_landmarks['right_eye'][0]], fill=(0, 0, 0, 110), width=6)
 
    pil_image.show()


//测距
import face_recognition

# Often instead of just checking if two faces match or not (True or False), it's helpful to see how similar they are.
# You can do that by using the face_distance function.

# The model was trained in a way that faces with a distance of 0.6 or less should be a match. But if you want to
# be more strict, you can look for a smaller face distance. For example, using a 0.55 cutoff would reduce false
# positive matches at the risk of more false negatives.

# Note: This isn't exactly the same as a "percent match". The scale isn't linear. But you can assume that images with a
# smaller distance are more similar to each other than ones with a larger distance.

# 加载已知人名的人脸图像
known_aobama_image = face_recognition.load_image_file("C:/Users/Administrator/Desktop/aobama.jpg")
known_chuanpu_image = face_recognition.load_image_file("C:/Users/Administrator/Desktop/chuanpu.jpg")

# 获取人脸编码（特征向量）
aobama_face_encoding = face_recognition.face_encodings(known_aobama_image)[0]
chuanpu_face_encoding = face_recognition.face_encodings(known_chuanpu_image)[0]

known_encodings = [
    aobama_face_encoding,
    chuanpu_face_encoding
]

# 加载测试人脸图像
image_to_test = face_recognition.load_image_file("C:/Users/Administrator/Desktop/unknown.jpg")
image_to_test_encoding = face_recognition.face_encodings(image_to_test)[0]

# 计算距离
face_distances = face_recognition.face_distance(known_encodings, image_to_test_encoding)

# 打印：测试人脸分别与已知的两张人脸之间的距离，并设置比对阈值。
for i, face_distance in enumerate(face_distances):
    print("The test image has a distance of {:.2} from known image #{}".format(face_distance, i))
    print("- With a normal cutoff of 0.6, would the test image match the known image? {}".format(face_distance < 0.6))
    print("- With a very strict cutoff of 0.5, would the test image match the known image? {}".format(
        face_distance < 0.5))
    print("-----------------------------------")
